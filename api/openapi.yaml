openapi: 3.1.0
info:
  title: Chatbot Backend Rust Edition
  description: Chatbot Backend Rust Edition
  version: 1.0.0
servers:
  - url: 'https'

components:
  responses:
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  schemas:
    Error:
      type: object
      properties:
        message:
          type: string
      required:
        - message

    Conversation:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        title:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - userId
        - messages
        - createdAt
        - updatedAt

    Message:
      type: object
      properties:
        id:
          type: string
          format: uuid
        conversationId:
          type: string
          format: uuid
        from:
          type: string
          enum: [ user, bot ]
        content:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - conversationId
        - from
        - content
        - createdAt
        - updatedAt

    WebSocketMessage:
      type: object
      properties:
        id:
          type: string
          format: uuid
        contentChuck:
          type: string
        withInfo:
          type: boolean
          description: If true, the message will be sent with the following info
        conversationId:
          type: string
          format: uuid
        from:
          type: string
          enum: [ bot ]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - contentChuck
        - withInfo

paths:
  /conversations:
    get:
      summary: Get all conversations
      operationId: getConversations
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Conversation'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      summary: Create a new conversation
      operationId: createConversation
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conversation'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /conversations/{conversationId}/messages:
    get:
      summary: Get all messages of a conversation
      operationId: getMessages
      parameters:
        - name: conversationId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      summary: Create a new message in a conversation
      operationId: createMessage
      parameters:
        - name: conversationId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: string
              description: The content of the message
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /conversations/{conversationId}/messages/{messageId}:
    put:
      summary: Update a message in a conversation
      description: Update a message in a conversation. Once a message is updated, the messages created after it will be deleted.
      operationId: updateMessage
      parameters:
        - name: conversationId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: messageId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: string
              description: The new content of the message
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /ws/{conversationId}:
    get:
      summary: Connect to a conversation
      operationId: connectToConversation
      parameters:
        - name: conversationId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - in: header
          name: Connection
          required: true
          schema:
            type: string
        - in: header
          name: Upgrade
          required: true
          schema:
            type: string
        - in: header
          name: Sec-WebSocket-Key
          required: true
          schema:
            type: string
        - in: header
          name: Sec-WebSocket-Version
          required: true
          schema:
            type: string
      responses:
        '101':
          headers:
            Connection:
              required: true
              schema:
                type: string
            Upgrade:
              required: true
              schema:
                type: string
            Sec-WebSocket-Accept:
              required: true
              schema:
                type: string
          description: 101 response
        "default":
          content:
            text/plain:
              schema:
                type: string
          description: Error response
